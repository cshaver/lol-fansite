$-viewports: (
  tiny,
  small,
  medium,
  large
);

$-viewports-max: (
  tiny: 414px,
  small: 767px,
  medium: 1023px
);

$-viewports-min: (
  smallish: 415px,
  medium: 768px,
  large: 1024px
);

@mixin viewport($viewport) {
  @if map-has-key($-viewports-max, $viewport) and map-has-key($-viewports-min, $viewport) {
    $max-width: map-get($-viewports-max, $viewport);
    $min-width: map-get($-viewports-min, $viewport);
    @media (max-width: $max-width) and (min-width: $min-width){
      @content;
    }
  }
  @else if map-has-key($-viewports-max, $viewport) {
    $max-width: map-get($-viewports-max, $viewport);
    @media (max-width: $max-width){
      @content;
    }
  }
  @else if map-has-key($-viewports-min, $viewport) {
    $min-width: map-get($-viewports-min, $viewport);
    @media (min-width: $min-width){
      @content;
    }
  }
}

@mixin min-viewport($viewport) {
  @if map-has-key($-viewports-min, $viewport) {
    $min-width: map-get($-viewports-min, $viewport);
    @media (min-width: $min-width){
      @content;
    }
  }
}

@mixin max-viewport($viewport) {
  @if map-has-key($-viewports-max, $viewport) {
    $max-width: map-get($-viewports-max, $viewport);
    @media (max-width: $max-width){
      @content;
    }
  }
}

@each $viewport in $-viewports {
  $i: index($-viewports, $viewport);

  .#{$viewport} {
    &-hide {
      @extend .hidden;
    }

    &-only {
      @if length($-viewports) > $i {
        @include viewport(nth($-viewports, $i + 1)) {
          display: none;
        }
      }

      @if $i > 1 {
        @include viewport(nth($-viewports, $i - 1)) {
          display: none;
        }
      }
    }
  }
}
